/**
 * @fileoverview Main entry point for the Movies Platform Backend API
 * @description Initializes Express server with middleware, routes, and database connection
 * @version 1.0.0
 * @author Movies Platform Team
 * @since 2025-09-28
 */

import express, { Application, Request, Response } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import { connectToDatabase } from './config/database';
import { environment } from './config/environment';
import { emailService } from './services/emailService';
import { errorHandler, notFound } from './middleware/errorHandler';
import { IApiResponse } from './types';
import authRoutes from './routes/authRoutes';

/**
 * @class Server
 * @description Main server class that handles application initialization
 */
class Server {
  private app: Application;
  private port: number;

  /**
   * @constructor
   * @description Initializes the Express application
   */
  constructor() {
    this.app = express();
    this.port = environment.get('port');

    this.initializeMiddleware();
    this.initializeRoutes();
    this.initializeErrorHandling();
  }

  /**
   * @method initializeMiddleware
   * @description Sets up Express middleware
   * @private
   */
  private initializeMiddleware(): void {
    // Security middleware
    this.app.use(helmet({
      crossOriginEmbedderPolicy: false,
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
        },
      },
    }));

    // CORS configuration
    this.app.use(cors({
      origin: [
        environment.get('frontendUrl'),
        'http://localhost:3000',
        'http://localhost:5173', // Vite default port
      ],
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    }));

    // Body parsing middleware
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // Request logging in development
    if (environment.isDevelopment()) {
      this.app.use((req: Request, res: Response, next) => {
        console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
        next();
      });
    }
  }

  /**
   * @method initializeRoutes
   * @description Sets up application routes
   * @private
   */
  private initializeRoutes(): void {
    // Health check endpoint
    this.app.get('/health', (req: Request, res: Response) => {
      const response: IApiResponse = {
        success: true,
        message: 'Movies Platform API is running successfully',
        data: {
          environment: environment.get('nodeEnv'),
          timestamp: new Date().toISOString(),
          uptime: process.uptime(),
          version: '1.0.0',
        },
      };
      res.status(200).json(response);
    });

    // API documentation endpoint
    this.app.get('/api', (req: Request, res: Response) => {
      const response: IApiResponse = {
        success: true,
        message: 'Movies Platform API v1.0.0',
        data: {
          name: 'Movies Platform Backend API',
          version: '1.0.0',
          description: 'Backend API for Movies Streaming Platform',
          endpoints: {
            auth: '/api/auth/*',
            users: '/api/users/*',
            movies: '/api/movies/*',
            favorites: '/api/favorites/*',
            ratings: '/api/ratings/*',
            comments: '/api/comments/*',
          },
          documentation: '/docs',
          health: '/health',
        },
      };
      res.status(200).json(response);
    });

    // API routes
    this.app.use('/api/auth', authRoutes);
    // this.app.use('/api/users', userRoutes);      // Will be implemented in future sprints
    // this.app.use('/api/movies', movieRoutes);    // Will be implemented in future sprints
    // this.app.use('/api/favorites', favoriteRoutes); // Will be implemented in future sprints
    // this.app.use('/api/ratings', ratingRoutes);  // Will be implemented in future sprints
    // this.app.use('/api/comments', commentRoutes); // Will be implemented in future sprints

    // Serve API documentation (will be generated by JSDoc)
    this.app.use('/docs', express.static('docs'));

    // Root endpoint
    this.app.get('/', (req: Request, res: Response) => {
      const response: IApiResponse = {
        success: true,
        message: 'Welcome to Movies Platform API!',
        data: {
          message: 'API is running successfully',
          version: '1.0.0',
          documentation: `${req.protocol}://${req.get('host')}/docs`,
          endpoints: `${req.protocol}://${req.get('host')}/api`,
        },
      };
      res.status(200).json(response);
    });
  }

  /**
   * @method initializeErrorHandling
   * @description Sets up error handling middleware
   * @private
   */
  private initializeErrorHandling(): void {
    // 404 handler for unknown routes
    this.app.use(notFound);

    // Global error handler
    this.app.use(errorHandler);
  }

  /**
   * @method start
   * @description Starts the Express server
   * @returns {Promise<void>}
   */
  public async start(): Promise<void> {
    try {
      // Print configuration
      console.log('Starting Movies Platform Backend API...\n');

      if (environment.isDevelopment()) {
        environment.printConfig();
      }

      // Connect to database
      console.log('\nConnecting to database...');
      await connectToDatabase(environment.get('nodeEnv'));

      // Verify email service
      console.log('\nVerifying email service...');
      await emailService.verifyConnection();

      // Start server
      const server = this.app.listen(this.port, () => {
        console.log('\nServer started successfully!');
        console.log(`Environment: ${environment.get('nodeEnv')}`);
        console.log(`Port: ${this.port}`);
        console.log(`API URL: http://localhost:${this.port}`);
        console.log(`Documentation: http://localhost:${this.port}/docs`);
        console.log(`Health Check: http://localhost:${this.port}/health`);
        console.log('\nMovies Platform API is ready to serve requests!');
      });

      // Graceful shutdown
      process.on('SIGTERM', () => {
        console.log('\nSIGTERM received. Shutting down gracefully...');
        server.close(() => {
          console.log('Server closed successfully');
          process.exit(0);
        });
      });

      process.on('SIGINT', () => {
        console.log('\nSIGINT received. Shutting down gracefully...');
        server.close(() => {
          console.log('Server closed successfully');
          process.exit(0);
        });
      });

    } catch (error) {
      console.error('Failed to start server:', error);
      process.exit(1);
    }
  }

  /**
   * @method getApp
   * @description Returns the Express application instance
   * @returns {Application} Express application instance
   */
  public getApp(): Application {
    return this.app;
  }
}

// Create and start server
const server = new Server();

// Start server if this file is run directly
if (require.main === module) {
  server.start();
}

export default server;